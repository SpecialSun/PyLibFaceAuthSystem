# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'img.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import torch
import cv2
import qtawesome
import sys
import numpy as np
import img
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, pyqtSlot
from PyQt5.QtGui import QPixmap, QIcon
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QDialog, QApplication
from facenet_pytorch import MTCNN, InceptionResnetV1
from ui.admin_register_ui import RegisterStudentUi

# 全局变量
IMG_FILE_NAME = None


class ImgUi(object):
    def __init__(self, device=None):
        if device is None:
            device = 'cuda' if torch.cuda.is_available() else 'cpu'
        self.device = torch.device(device)
        self.mtcnn = MTCNN(keep_all=True, device=self.device)
        # 初始化InceptionResnetV1模型，用于特征提取
        self.resnet = InceptionResnetV1(pretrained='vggface2').eval().to(self.device)
        self.min_face_size = 100
        self.numpy_features = []
        self.isPhoto = 0
        self.processed_frame = None

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(363, 499)
        Dialog.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(20, 20, 320, 460))
        self.frame.setStyleSheet("\n"
                                 "#frame{\n"
                                 "background:#ffffff;\n"
                                 "border-top-left-radius:7px;\n"
                                 "border-top-right-radius:7px;\n"
                                 "border-bottom-left-radius:7px;\n"
                                 "border-bottom-right-radius:7px;\n"
                                 "border: 1px solid #8f8f91;\n"
                                 "\n"
                                 "}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.image_label = QtWidgets.QLabel(self.frame)
        self.image_label.setGeometry(QtCore.QRect(75, 140, 170, 230))
        self.image_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.image_label.setStyleSheet("font-size:26px;\n"
                                       "border: 1px solid #8f8f91;\n"
                                       "color:grey;")
        self.image_label.setScaledContents(True)
        self.image_label.setObjectName("image_label")
        self.close_button = QtWidgets.QPushButton(self.frame)
        self.close_button.setGeometry(QtCore.QRect(260, 20, 38, 38))
        self.close_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.close_button.setStyleSheet("QPushButton{\n"
                                        "                background-color: transparent; \n"
                                        "                border-radius:7px;\n"
                                        "  border: 2px solid #96989b;}\n"
                                        "            QPushButton:hover{\n"
                                        "               padding-top:5px;\n"
                                        "padding-left:5px;\n"
                                        "}")
        self.close_button.setText("")
        self.close_button.setObjectName("close_button")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(40, 80, 241, 41))
        self.label.setStyleSheet("color:black;\n"
                                 "border:none;\n"
                                 "font-size:25px;\n"
                                 "font-weight:700;\n"
                                 "font-family: \"微软雅黑\", Helvetica, Arial, sans-serif;")
        self.label.setObjectName("label")
        self.ok_button = QtWidgets.QPushButton(self.frame)
        self.ok_button.setGeometry(QtCore.QRect(80, 390, 160, 40))
        self.ok_button.setStyleSheet("#ok_button{\n"
                                     "color:#ffffff;\n"
                                     "background:#0099ff;\n"
                                     "border:2px solid gray;\n"
                                     "font-size:20px;\n"
                                     "\n"
                                     "font-family: \"微软雅黑\";\n"
                                     "border-radius:12px;\n"
                                     "height:38px;\n"
                                     "}\n"
                                     "\n"
                                     "#ok_button:hover{\n"
                                     "padding-under:5px;\n"
                                     "padding-left:5px;\n"
                                     "background:#008deb;\n"
                                     "   }")
        self.ok_button.setObjectName("ok_button")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        # 关闭按钮美化
        icon_close = qtawesome.icon('fa.times', color='#7b8290')
        self.close_button.setIcon(icon_close)
        self.close_button.setIconSize(QtCore.QSize(30, 30))  # 根据需要调整图标大小
        # 设置 QLabel 可以接收鼠标事件
        self.image_label.mousePressEvent = self.on_label_clicked
        # 关闭窗口
        self.close_button.clicked.connect(Dialog.close)
        # 确认按钮按下
        self.ok_button.clicked.connect(self.ok_button_clicked)
        # 窗口设置
        Dialog.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 隐藏外围边框
        Dialog.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 产生一个无边框的窗口，用户不能移动和改变大小
        Dialog.setWindowTitle("人脸识别")  # 设置标题
        Dialog.setWindowIcon(QIcon(':/icons/images/logo.jpg'))  # 设置logo

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.image_label.setText(_translate("Dialog", "点我选择图片"))
        self.label.setText(_translate("Dialog", "请选择照片进行注册："))
        self.ok_button.setText(_translate("Dialog", "确认照片"))

    @pyqtSlot()
    def on_label_clicked(self, event):
        if event.button() == Qt.LeftButton:  # 检查是否是左键点击
            self.open_image()

    def open_image(self):
        # 使用默认样式的 QFileDialog
        file_name, _ = QFileDialog.getOpenFileName(None, "选择图片", "", "Images (*.PNG *.JPG *.BMP *.JPEG)")
        if file_name:
            frame = cv2.imread(file_name)
            if frame is None:
                QMessageBox.information(None, "错误", "无法读取图片，请检查路径是否正确")
                return
            if len(frame.shape) == 2:
                frame = cv2.cvtColor(frame, cv2.COLOR_GRAY2BGR)
                # 检测人脸
            self.processed_frame, boxes = self.detect_faces(frame)
            # 如果没有检测到人脸，则显示错误信息
            if boxes is None or len(boxes) == 0:
                QMessageBox.information(None, "错误", "没有人脸检测到，请检查图片")
            else:
                # 提取人脸特征
                face_features = self.extract_face_features(frame)
                if face_features is not None:
                    self.numpy_features = self.convert_features_to_array(face_features)
                    # 显示信息
                    QMessageBox.information(None, "提示", "检测到人脸!")

                    pixmap = QPixmap(file_name)
                    self.image_label.setPixmap(pixmap.scaled(self.image_label.size(), Qt.KeepAspectRatio))
                    self.isPhoto = 1
                    global IMG_FILE_NAME
                    IMG_FILE_NAME = file_name
                    # 显示处理后的帧（如果需要）
                    # cv2.imshow('Face Recognition', processed_frame)
                else:
                    self.isPhoto = 0
                    QMessageBox.information(None, "提示", "没有检测到人脸！")

    def detect_faces(self, frame):
        boxes, _ = self.mtcnn.detect(frame)
        filtered_boxes = []
        if boxes is not None:
            for box in boxes:
                x1, y1, x2, y2 = box  # 假设detect方法返回的每个box包含置信度
                width = x2 - x1
                height = y2 - y1
                face_size = min(width, height)  # 计算人脸尺寸

                # 过滤小于最小尺寸阈值的人脸
                if face_size >= self.min_face_size:
                    cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                    filtered_boxes.append(box)  # 将符合条件的box添加到列表中

        return frame, filtered_boxes  # 返回修改后的frame和过滤后的人脸框列表

    def extract_face_features(self, frame):
        # 检测人脸并获取边界框
        frame_with_boxes, boxes = self.detect_faces(frame.copy())
        # 初始化一个空的特征列表，用于存储当前帧的特征
        face_features = []
        if boxes is not None:
            for box in boxes:
                x1, y1, x2, y2 = box
                # 根据边界框裁剪人脸区域
                face = frame[int(y1):int(y2), int(x1):int(x2)]
                # 调整图像大小以匹配模型的输入要求，并转换为Tensor
                face_tensor = self._prepare_face_tensor(face)
                if face_tensor is not None:
                    # 使用预训练的模型提取特征
                    with torch.no_grad():
                        feature = self.resnet(face_tensor).cpu()
                        face_features.append(feature)
                    return face_features
                else:
                    return None

    def _prepare_face_tensor(self, face):
        # 将裁剪出的人脸图像转换为模型所需的Tensor格式
        if face.size == 0:
            print("Warning: Empty face image, skipping tensor preparation.")
            return None  # 或者返回其他适当的值，比如一个全零的Tensor
        else:
            face = cv2.resize(face, (160, 160))  # 调整图像大小以适应模型输入
            face = face.astype(np.float32) / 255.0  # 归一化图像
            face = face.transpose((2, 0, 1))  # 转换图像维度顺序
            face_tensor = torch.from_numpy(face).unsqueeze(0).to(self.device)  # 转换为Tensor并添加到设备
            return face_tensor

    def convert_features_to_array(self, face_features):
        for feature in face_features:
            # 将PyTorch张量转换为NumPy数组，并添加到列表中
            numpy_feature = feature.squeeze().cpu().numpy()
            self.numpy_features.append(numpy_feature)
        return self.numpy_features

    @staticmethod
    def registration_dialog_box():
        global IMG_FILE_NAME
        # 创建 RegisterStudentUi 的实例
        dialog = RegisterStudentUi(IMG_FILE_NAME)
        # 创建一个 QDialog 实例，并使用 Ui_Dialog 来设置它的界面
        dialog_window = QDialog()
        dialog.setupUi(dialog_window)
        # 显示对话框窗口
        dialog_window.exec_()  # 使用 exec_() 来显示模态对话框

    def ok_button_clicked(self):
        if self.isPhoto == 1:
            # 弹出注册对话框
            height, width = self.processed_frame.shape[:2]
            resized_frame = cv2.resize(self.processed_frame, (width // 2, height // 2))
            # 现在显示调整尺寸后的图像
            cv2.imshow('Face Recognition', resized_frame)
            QApplication.processEvents()
            self.registration_dialog_box()
        else:
            QMessageBox.warning(None, "Warning", "请上传照片后再进行注册！")


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    widgets = QtWidgets.QMainWindow()
    ui = ImgUi()
    ui.setupUi(widgets)
    widgets.show()
    sys.exit(app.exec_())
